{"version":3,"file":"static/js/901.13af137d.chunk.js","mappings":"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","sources":["redux/contacts/contactSelectors.js","components/contactForm/ContactForm.styled.js","components/contactForm/ContactForm.jsx","components/filter/Filter.styled.js","components/filter/Filter.jsx","components/contactList/ContactList.styled.js","components/contactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectItems = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectItems, selectFilter],\n  (allContacts, filterValue) => {\n    const filteredContacts = allContacts.filter(contact => {\n      const filterLower = filterValue.toLowerCase();\n      const contactNameLower = contact.name.toLowerCase();\n\n      return contactNameLower.includes(filterLower);\n    });\n\n    return filteredContacts;\n  }\n);","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormHeader = styled.h2`\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 8px;\n`;\n\nexport const FormContainer = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  margin-bottom: 12px;\n  padding: 12px;\n  border: 1px solid var(--border-color);\n  background-color: var(--bcg-color);\n`;\n\nexport const FormLabel = styled.label`\n  margin-bottom: 12px;\n  letter-spacing: 4px;\n`;\n\nexport const FormInput = styled(Field)`\n  display: block;\n  width: 300px;\n  margin-top: 8px;\n  padding: 4px;\n  color: var(--text-color);\n  background-color: inherit;\n  border: 2px solid var(--border-color);\n  cursor: zoom-in;\n  transition: width 250ms cubic-bezier(0.5, 0, 0.75, 0) 25ms;\n  &:focus,\n  &:hover {\n    width: 500px;\n    outline: 1px solid var(--accent-color);\n    box-shadow: 0 0 20px var(--add-color);\n  }\n`;\n\nexport const FormErrorMessage = styled(ErrorMessage)`\n  display: block;\n  width: 700px;\n  margin-top: 8px;\n  color: var(--text-color);\n  font-size: 12px;\n`;\n\nexport const FormBtm = styled.button`\n  padding: 4px 12px;\n  color: var(--text-color);\n  font-size: inherit;\n  font-weight: bold;\n  background-color: initial;\n  border: 2px solid var(--add-color);\n  cursor: pointer;\n  &:hover {\n    box-shadow: 0 0 20px var(--add-color);\n    border-color: var(--border-color);\n    outline: 1px solid var(--accent-color);\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactOperation';\nimport { selectItems } from 'redux/contacts/contactSelectors';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport { ImCheckmark2 } from 'react-icons/im';\nimport {\n  FormHeader,\n  FormContainer,\n  FormLabel,\n  FormInput,\n  FormErrorMessage,\n  FormBtm,\n} from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      ),\n    number: yup\n      .string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +. At least 5 symbols'\n      )\n      .min(5)\n      .max(16),\n  });\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectItems);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const checkedName = contacts.find(contact => {\n      const nameLower = values.name.toLowerCase();\n      const contactNameLower = contact.name.toLowerCase();\n      return contactNameLower === nameLower || contact.number === values.number;\n    });\n\n    if (checkedName) {\n      alert('Such data is already in the phone book');\n      return resetForm();\n    }\n\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <>\n      <FormHeader>Phonebook</FormHeader>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <FormContainer autoComplete=\"off\">\n          <FormLabel htmlFor=\"name\">\n            Name\n            <FormInput type=\"text\" name=\"name\" required />\n            <FormErrorMessage name=\"name\" component=\"span\" />\n          </FormLabel>\n          <FormLabel htmlFor=\"number\">\n            Number\n            <FormInput type=\"tel\" name=\"number\" required />\n            <FormErrorMessage name=\"number\" component=\"span\" />\n          </FormLabel>\n          <FormBtm type=\"submit\">\n            <ImCheckmark2 /> add contact\n          </FormBtm>\n        </FormContainer>\n      </Formik>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const FilterHeader = styled.h3`\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 8px;\n`;\n\nexport const FilterContainer = styled.div`\n  padding: 12px;\n  margin-bottom: 12px;\n  border: 1px solid var(--border-color);\n  background-color: var(--bcg-color);\n`;\n\nexport const FilterLabel = styled.label`\n  display: inline-block;\n  letter-spacing: 4px;\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n  width: 300px;\n  margin-top: 8px;\n  padding: 4px;\n  color: var(--text-color);\n  background-color: inherit;\n  border: 2px solid var(--border-color);\n  outline: 1px solid var(--filter-color);\n  cursor: zoom-in;\n  transition: width 250ms cubic-bezier(0.5, 0, 0.75, 0) 25ms;\n  &:hover,\n  &:focus {\n    width: 500px;\n    outline: 1px solid var(--accent-color);\n    box-shadow: 0 0 20px var(--filter-color);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterValue } from 'redux/contacts/filterSlice';\n\nimport { RxPaperPlane } from 'react-icons/rx';\nimport { FilterHeader, FilterContainer, FilterLabel, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = event => dispatch(filterValue(event.target.value));\n  return (\n    <>\n      <FilterHeader>Contacts</FilterHeader>\n      <FilterContainer>\n        <FilterLabel>\n          <RxPaperPlane /> Find contacts by name\n          <FilterInput\n            type=\"text\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Use only letters, apostrophe, dash and spaces.\"\n            onChange={handleFilterChange}\n          />\n        </FilterLabel>\n      </FilterContainer>\n    </>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const ListContainer = styled.ul`\n    padding: 12px;\n    border: 1px solid var(--border-color);\n    list-style-type: none;\n    background-color: var(--bcg-color);\n`;\n\nexport const ListItem = styled.li`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 4px 0;\n    border-bottom: 1px dotted var(--border-color);\n    &:not(:last-child){\n        margin-bottom: 4px;\n    }\n`;\n\nexport const ListBtn = styled.button`\n    padding: 4px 12px;\n    color: var(--text-color);\n    font-size: inherit;\n    font-weight: bold;\n    background-color: inherit;\n    border: 2px solid var(--delete-color);\n    cursor: pointer;\n    &:hover{    \n        box-shadow: 0 0 20px var(--delete-color);\n        border: 2px solid var(--border-color);\n        outline: 1px solid var(--accent-color);\n    }\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/contactSelectors';\nimport { deleteContact, fetchContacts } from 'redux/contacts/contactOperation';\nimport { useEffect } from 'react';\n\nimport { ImPushpin, ImCross } from \"react-icons/im\";\nimport { ListContainer, ListItem, ListBtn } from './ContactList.styled';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onDeleateButton = contact => dispatch(deleteContact(contact.id));\n\n  return (\n    <ListContainer>\n      {filteredContacts.map(contact => (\n        <ListItem key={contact.id}>\n          <div>\n            <ImPushpin /> <span>{contact.name}:</span>{' '}\n            <span>{contact.number}</span>\n          </div>\n          <ListBtn type=\"button\" onClick={() => onDeleateButton(contact)}>\n            <ImCross /> delete contact\n          </ListBtn>\n        </ListItem>\n      ))}\n    </ListContainer>\n  );\n};\n\nexport default ContactList;\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\n\nimport ContactForm from '../components/contactForm/ContactForm';\nimport Filter from '../components/filter/Filter';\nimport ContactList from '../components/contactList/ContactList';\nimport Loader from 'components/loader/Loader';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectItems","state","contacts","items","selectFilteredContacts","createSelector","filter","allContacts","filterValue","contact","filterLower","toLowerCase","name","includes","FormHeader","styled","FormContainer","Form","FormLabel","FormInput","Field","FormErrorMessage","ErrorMessage","FormBtm","schema","yup","shape","matches","number","min","max","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","resetForm","find","nameLower","alert","addContact","autoComplete","htmlFor","type","required","component","FilterHeader","FilterContainer","FilterLabel","FilterInput","pattern","title","onChange","event","target","value","ListContainer","ListItem","ListBtn","filteredContacts","useEffect","fetchContacts","map","onClick","deleteContact","id","onDeleateButton","Suspense","fallback","Loader"],"sourceRoot":""}